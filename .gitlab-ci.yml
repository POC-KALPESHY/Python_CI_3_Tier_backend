stages:
  - build
  - test
  - analyze
  - scan
  - deploy
  - notify
  - docker_image_scan

variables:
  ARTIFACTORY_URL: "https://onkarko.jfrog.io/artifactory/python_3_tier-pypi-local/"
  ARTIFACTORY_REPO: "python_3_tier-pypi-local"
  DOCKER_IMAGE: "python_ci_image"
  DOCKER_TAG: "v2"
  DOCKER_REGISTRY: $CI_REGISTRY
  DOCKER_USER: $CI_REGISTRY_USER
  DOCKER_PASSWORD: $DOCKER_CI_TOKEN
  GITLAB_ACCESS_TOKEN: $GITLAB_PERSONAL_TOKEN


include:
#     - template: Jobs/Secret-Detection.gitlab-ci.yml
#     - template: Jobs/Dependency-Scanning.gitlab-ci.yml
#     - template: Jobs/SAST.gitlab-ci.yml
    - template: Jobs/Container-Scanning.gitlab-ci.yml


build_docker_image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD" $DOCKER_REGISTRY
  script:
    - docker build -t registry.gitlab.com/docker_ci_25_07/python_ci_3_tier:$DOCKER_TAG .
    - docker save -o python_ci_3_tier_$DOCKER_TAG.tar $DOCKER_REGISTRY/docker_ci_25_07/python_ci_3_tier:$DOCKER_TAG
    - ls -lh python_ci_3_tier_$DOCKER_TAG.tar 
  artifacts:
    paths:
      - python_ci_3_tier_$DOCKER_TAG.tar
  only:
    - main

test:
   stage: test
   image: python:3
   script:
     - pip install pytest-mock
     - pip install requests pytest pytest-cov
     - pytest --cov --cov-report term --cov-report xml:coverage.xml

   coverage: '/TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'

   artifacts:
     reports:
       junit: test/test/report.xml
     paths:
       - test/coverage.xml
   only:
    - main

  #  rules:
  #    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH =~ /^feature\//'

sonarcloud-analysis:
   stage: analyze
   image:
     name: sonarsource/sonar-scanner-cli:latest
     entrypoint: [""]
   cache:
     key: "${CI_JOB_NAME}"
     paths:
       - .sonar/cache
   script:
     - sonar-scanner -Dsonar.sources=src/,run.py,test/newspaper_test.py, -Dsonar.organization=gitaction-poc7-sonarqube -Dsonar.projectKey=gitaction-poc7-sonarqube_python-ci-3-tier-backend   -Dsonar.python.coverage.reportPaths=coverage.xml
   only:
    - main


quality-gate-check:
  stage: analyze
  script:
    - curl https://sonarcloud.io/api/qualitygates/project_status?projectKey=$gitaction-poc7-sonarqube_python-ci-3-tier-backend >result.json
    - cat result.json
    - if [ $(jq -r '.projectStatus.status' result.json) = ERROR ] ; then $CODEBUILD_BUILD_SUCCEEDING -eq 0 ;fi
  needs:
    - sonarcloud-analysis
  only:
    - main


container_scanning:
  stage: scan
  image: $CI_REGISTRY/namespace/container-scanning
  variables:
    CS_IMAGE: $CI_REGISTRY_IMAGE:$DOCKER_TAG
  script:
    - echo "Running container scanning"
    - container-scanner scan $CS_IMAGE -o report.json
  artifacts:
    paths:
      - report.json
    reports:
      container_scanning: report.json



trivy_scan:
  stage: scan
  image: debian:buster
  before_script:
    - apt-get update
    - apt-get install -y wget apt-transport-https gnupg lsb-release
    - wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add -
    - echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | tee -a /etc/apt/sources.list.d/trivy.list
    - apt-get update
    - apt-get install -y trivy

  script:
    - export GIT_REPO_URL="https://oauth2:${GITLAB_ACCESS_TOKEN}@${GIT_REPO_URL}"
    - trivy repo $GIT_REPO_URL
    - trivy --format json --output trivy_report.json repo $GIT_REPO_URL

  artifacts:
    paths:
      - trivy_report.json
  only:
    - main
#  rules:
#    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH =~ /^feature\//'



trivy_html_conversion:
  stage: scan
  image: debian:buster
  needs:
    - trivy_scan
  before_script:
    - apt-get update
    - apt-get install -y wget apt-transport-https gnupg lsb-release jq
  script:
    - |
      cat trivy_report.json | jq -r '[
        "<html><body><table border=\"1\">",
        "<tr><th>Target</th><th>Vulnerability ID</th><th>Severity</th><th>Description</th></tr>",
        (.Results[] |
          .Vulnerabilities[]? |
          "<tr><td>\(.Target)</td><td>\(.VulnerabilityID)</td><td>\(.Severity)</td><td>\(.Description)</td></tr>"
        ),
        "</table></body></html>"
      ] | .[]' > trivy_report.html
  artifacts:
    paths:
      - trivy_report.html
  only:
    - main
#  rules:
#    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH =~ /^feature\//'

synk-scan:
  image: node:latest
  stage: scan
  services:
  - openjdk:11-jre-slim-buster
  before_script:
    - apt-get update
    - apt-get install default-jdk -y
  script:
    - npm install -g npm@latest
    - npm install -g snyk
    - snyk auth $SNYK_TOKEN || { echo "Snyk authentication failed."; exit 1; }
    - snyk test --all-sub-projects --json > snyk_report.json || echo "Snyk test completed with vulnerabilities."
  artifacts:
    paths:
      - snyk_report.json
  only:
    - main

  # rules:
  #   - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH =~ /^feature\//'


snyk_html_conversion:
  stage: scan
  image: debian:buster
  before_script:
    - apt-get update
    - apt-get install -y wget apt-transport-https gnupg lsb-release jq
  needs:
    - synk-scan
  script:
    - |
      cat snyk_report.json | jq -r '[
        "<html><body><table border=\"1\">",
        "<tr><th>Package</th><th>Vulnerability ID</th><th>Severity</th><th>CVSS Score</th><th>URL</th><th>Description</th></tr>",
        (.vulnerabilities[]? | 
          "<tr><td>\(.packageName)</td><td>\(.id)</td><td>\(.severity)</td><td>\(.CVSS)</td><td><a href=\"\(.url)\">\(.url)</a></td><td>\(.description)</td></tr>"
        ),
        "</table></body></html>"
      ] | join("\n")' > snyk_report.html
  artifacts:
    paths:
      - snyk_report.html
  only:
    - main

  # rules:
  #   - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH =~ /^feature\//'



  # publish_artifact_jfrog:
#   stage: deploy
#   script:
#     - apt update
#     - apt install -y python3-venv
#     - python3 -m venv myenv
#     - source myenv/bin/activate
#     - pip install twine
#     - twine upload --repository-url https://onkarko.jfrog.io/artifactory/api/pypi/python_3_tier-pypi src/dist/* -u onkarko@cybage.com -p cmVmdGtuOjAxOjE3NDY3NzIwMDU6cmFtRGpPMVVZOHdST0VSTGtuRHF5aElSRXFq
#     - deactivate
  # only:
  #   - main


#publish_artifacts_package_registry:
#  stage: deploy
#  variables:
#    USERNAME: "python_3_tier"
#    API_TOKEN: "glpat-evPDHZyxDtcUs17Rd8TN"
#  script:
#    - apt update
#    - apt install -y python3-venv
#    - python3 -m venv myenv
#    - source myenv/bin/activate
#    - pip install twine
#    - TWINE_PASSWORD=$API_TOKEN TWINE_USERNAME=$USERNAME twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi src/dist/*
#    - deactivate
# only:
#     - main

push_docker_image:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD" $DOCKER_REGISTRY
  script:
    - echo "Loading Docker image from tar file"
    - ls -lh python_ci_3_tier_$DOCKER_TAG.tar  # verify the tar file
    - docker load -i python_ci_3_tier_$DOCKER_TAG.tar
    - echo "Pushing Docker image with tag:$DOCKER_TAG"
    - docker push $DOCKER_REGISTRY/docker_ci_25_07/python_ci_3_tier:$DOCKER_TAG
  only:
    - main

slack_notification:
  stage: notify
  script:
    - |
      curl -X POST -H 'Content-type: application/json' --data '{"text":"Python Application Deployed Successfully! ðŸš€"}' https://hooks.slack.com/services/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
  only:
     - main



# Trivy_container_scanning:
#   stage: test
#   image:
#     name: alpine:3.11
#   variables:
#     # Override the GIT_STRATEGY variable in your `.gitlab-ci.yml` file and set it to `fetch` if you want to provide a `clair-whitelist.yml`
#     # file. See https://docs.gitlab.com/ee/user/application_security/container_scanning/index.html#overriding-the-container-scanning-template
#     # for details
#     GIT_STRATEGY: none
#     IMAGE: "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
#   allow_failure: true
#   before_script:
#     - export TRIVY_VERSION=${TRIVY_VERSION:-v0.19.2}
#     - apk add --no-cache curl docker-cli
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#     - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin ${TRIVY_VERSION}
#     - curl -sSL -o /tmp/trivy-gitlab.tpl https://github.com/aquasecurity/trivy/raw/${TRIVY_VERSION}/contrib/gitlab.tpl
#   script:
#     - docker load -i python_ci_3_tier_$DOCKER_TAG.tar
#     - trivy --exit-code 0 --cache-dir .trivycache/ --no-progress --format template --template "@/tmp/trivy-gitlab.tpl" -o gl-container-scanning-report.json python_ci_3_tier:$DOCKER_TAG
#   cache:
#     paths:
#       - .trivycache/
#   artifacts:
#     reports:
#       container_scanning: gl-container-scanning-report.json