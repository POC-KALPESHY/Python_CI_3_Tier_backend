stages:
  - build
  - test
  - analyze
  - trivy_scan
  - synk_scan
  - deploy
  - notify

# variables:
#   ARTIFACTORY_URL: "https://onkarko.jfrog.io/artifactory/python_3_tier-pypi-local/"
#   ARTIFACTORY_REPO: "python_3_tier-pypi-local"


# include:
#    - template: Jobs/Secret-Detection.gitlab-ci.yml
#    - template: Jobs/Dependency-Scanning.gitlab-ci.yml
#    - template: Jobs/SAST.gitlab-ci.yml



# test:
#    stage: test
#    image: python:3
#    script:
#      - pip install pytest-mock
#      - pip install requests pytest pytest-cov
#      - pytest --cov --cov-report term --cov-report xml:coverage.xml

#    coverage: '/TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'

#    artifacts:
#      reports:
#        junit: test/test/report.xml
#      paths:
#        - test/coverage.xml

# sonarcloud-analysis:
#    stage: analyze
#    image:
#      name: sonarsource/sonar-scanner-cli:latest
#      entrypoint: [""]
#    cache:
#      key: "${CI_JOB_NAME}"
#      paths:
#        - .sonar/cache
#    script:
#      - sonar-scanner -Dsonar.sources=src/,run.py,test/newspaper_test.py, -Dsonar.organization=gitaction-poc7-sonarqube -Dsonar.projectKey=gitaction-poc7-sonarqube_python-ci-3-tier-backend   -Dsonar.python.coverage.reportPaths=coverage.xml

#quality-gate-check:
# stage: analyze  # Moved to the analyze stage
# script:
#   - curl https://sonarcloud.io/api/qualitygates/project_status?projectKey=$gitaction-poc7-sonarqube_python-ci-3-tier-backend >result.json
#   - cat result.json
#   - if [ $(jq -r '.projectStatus.status' result.json) = ERROR ] ; then $CODEBUILD_BUILD_SUCCEEDING -eq 0 ;fi
# needs:
#   - sonarcloud-analysis

# trivy_scan:
#   stage: trivy_scan
#   image: debian:buster
#   before_script:
#     - apt-get update
#     - apt-get install -y wget apt-transport-https gnupg lsb-release
#     - wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add -
#     - echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | tee -a /etc/apt/sources.list.d/trivy.list
#     - apt-get update
#     - apt-get install -y trivy

#   script:
#     - trivy repo https://gitlab.com/gitlab_advance1/python_ci_3_tier.git
#     - trivy --format json --output trivy_report.json repo https://gitlab.com/gitlab_advance1/python_ci_3_tier.git

#   artifacts:
#     paths:
#       - trivy_report.json

# trivy_html_conversion:
#   stage: trivy_scan
#   image: debian:buster
#   needs:
#     - trivy_scan
#   before_script:
#     - apt-get update
#     - apt-get install -y wget apt-transport-https gnupg lsb-release jq
#   script:
#     - |
#       cat trivy_report.json | jq -r '[
#         "<html><body><table border=\"1\">",
#         "<tr><th>Target</th><th>Vulnerability ID</th><th>Severity</th><th>Description</th></tr>",
#         (.Results[] |
#           .Vulnerabilities[]? |
#           "<tr><td>\(.Target)</td><td>\(.VulnerabilityID)</td><td>\(.Severity)</td><td>\(.Description)</td></tr>"
#         ),
#         "</table></body></html>"
#       ] | .[]' > trivy_report.html
#   artifacts:
#     paths:
#       - trivy_report.html

# synk-scan:
#   image: node:latest
#   stage: synk_scan
#   services:
#   - openjdk:11-jre-slim-buster
#   before_script:
#     - apt-get update
#     - apt-get install default-jdk -y
#   script:
#     - npm install -g npm@latest
#     - npm install -g snyk
#     - npm install maven
#     - npm install python3
#     - snyk auth $SNYK_TOKEN
#     - snyk test


# synk-scan:
#   image: node:latest
#   stage: synk_scan
#   services:
#   - openjdk:11-jre-slim-buster
#   before_script:
#     - apt-get update
#     - apt-get install default-jdk -y
#   script:
#     - npm install -g npm@latest
#     - npm install -g snyk
#     # - npm install maven
#     # - npm install python3
#     - snyk auth $SNYK_TOKEN || { echo "Snyk authentication failed."; exit 1; }
#     - snyk test --all-sub-projects --json > snyk_report.json || echo "Snyk test completed with vulnerabilities."
#   artifacts:
#     paths:
#       - snyk_report.json





# snyk_html_conversion:
#   stage: synk_scan
#   image: debian:buster
#   before_script:
#     - apt-get update
#     - apt-get install -y wget apt-transport-https gnupg lsb-release jq
#   needs:
#     - synk-scan
#   script:
#     - |
#       cat snyk_report.json | jq -r '[
#         "<html><body><table border=\"1\">",
#         "<tr><th>Package</th><th>Vulnerability ID</th><th>Severity</th><th>CVSS Score</th><th>URL</th><th>Description</th></tr>",
#         (.vulnerabilities[]? | 
#           "<tr><td>\(.packageName)</td><td>\(.id)</td><td>\(.severity)</td><td>\(.CVSS)</td><td><a href=\"\(.url)\">\(.url)</a></td><td>\(.description)</td></tr>"
#         ),
#         "</table></body></html>"
#       ] | join("\n")' > snyk_report.html
#   artifacts:
#     paths:
#       - snyk_report.html


# publish_artifact_jfrog:
#   stage: deploy
#   script:
#     - apt update
#     - apt install -y python3-venv
#     - python3 -m venv myenv
#     - source myenv/bin/activate
#     - pip install twine
#     - twine upload --repository-url https://onkarko.jfrog.io/artifactory/api/pypi/python_3_tier-pypi src/dist/* -u onkarko@cybage.com -p cmVmdGtuOjAxOjE3NDY3NzIwMDU6cmFtRGpPMVVZOHdST0VSTGtuRHF5aElSRXFq
#     - deactivate


#publish_artifacts_package_registry:
#  stage: deploy
#  variables:
#    USERNAME: "python_3_tier"
#    API_TOKEN: "glpat-evPDHZyxDtcUs17Rd8TN"
#  script:
#    - apt update
#    - apt install -y python3-venv
#    - python3 -m venv myenv
#    - source myenv/bin/activate
#    - pip install twine
#    - TWINE_PASSWORD=$API_TOKEN TWINE_USERNAME=$USERNAME twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi src/dist/*
#    - deactivate

# slack_notification:
#   stage: notify
#   script:
#     - |
#       curl -X POST -H 'Content-type: application/json' --data '{"text":"Python Application Deployed Successfully! ðŸš€"}' https://hooks.slack.com/services/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




notify_job:
  stage: notify
  image: python:3.8
  script:
    # - pip install --upgrade pip
    - pip install smtplib
    - python send_email.py  "success"